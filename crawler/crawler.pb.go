// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crawler.proto

/*
Package crawler is a generated protocol buffer package.

It is generated from these files:
	crawler.proto

It has these top-level messages:
	LinkRequest
	CrawlerResponse
	StopRequest
	StopResponse
	ListRequest
*/
package crawler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LinkRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *LinkRequest) Reset()                    { *m = LinkRequest{} }
func (m *LinkRequest) String() string            { return proto.CompactTextString(m) }
func (*LinkRequest) ProtoMessage()               {}
func (*LinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LinkRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type CrawlerResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *CrawlerResponse) Reset()                    { *m = CrawlerResponse{} }
func (m *CrawlerResponse) String() string            { return proto.CompactTextString(m) }
func (*CrawlerResponse) ProtoMessage()               {}
func (*CrawlerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CrawlerResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type StopRequest struct {
	Link string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StopRequest) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

type StopResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *StopResponse) Reset()                    { *m = StopResponse{} }
func (m *StopResponse) String() string            { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()               {}
func (*StopResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StopResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ListRequest struct {
	List bool `protobuf:"varint,1,opt,name=list" json:"list,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListRequest) GetList() bool {
	if m != nil {
		return m.List
	}
	return false
}

func init() {
	proto.RegisterType((*LinkRequest)(nil), "crawler.LinkRequest")
	proto.RegisterType((*CrawlerResponse)(nil), "crawler.CrawlerResponse")
	proto.RegisterType((*StopRequest)(nil), "crawler.StopRequest")
	proto.RegisterType((*StopResponse)(nil), "crawler.StopResponse")
	proto.RegisterType((*ListRequest)(nil), "crawler.ListRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Crawler service

type CrawlerClient interface {
	Crawl(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*CrawlerResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	ListVisitedUrls(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Crawler_ListVisitedUrlsClient, error)
}

type crawlerClient struct {
	cc *grpc.ClientConn
}

func NewCrawlerClient(cc *grpc.ClientConn) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) Crawl(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*CrawlerResponse, error) {
	out := new(CrawlerResponse)
	err := grpc.Invoke(ctx, "/crawler.Crawler/Crawl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := grpc.Invoke(ctx, "/crawler.Crawler/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) ListVisitedUrls(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Crawler_ListVisitedUrlsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Crawler_serviceDesc.Streams[0], c.cc, "/crawler.Crawler/ListVisitedUrls", opts...)
	if err != nil {
		return nil, err
	}
	x := &crawlerListVisitedUrlsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Crawler_ListVisitedUrlsClient interface {
	Recv() (*LinkRequest, error)
	grpc.ClientStream
}

type crawlerListVisitedUrlsClient struct {
	grpc.ClientStream
}

func (x *crawlerListVisitedUrlsClient) Recv() (*LinkRequest, error) {
	m := new(LinkRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Crawler service

type CrawlerServer interface {
	Crawl(context.Context, *LinkRequest) (*CrawlerResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	ListVisitedUrls(*ListRequest, Crawler_ListVisitedUrlsServer) error
}

func RegisterCrawlerServer(s *grpc.Server, srv CrawlerServer) {
	s.RegisterService(&_Crawler_serviceDesc, srv)
}

func _Crawler_Crawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).Crawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.Crawler/Crawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).Crawl(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crawler_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.Crawler/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crawler_ListVisitedUrls_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrawlerServer).ListVisitedUrls(m, &crawlerListVisitedUrlsServer{stream})
}

type Crawler_ListVisitedUrlsServer interface {
	Send(*LinkRequest) error
	grpc.ServerStream
}

type crawlerListVisitedUrlsServer struct {
	grpc.ServerStream
}

func (x *crawlerListVisitedUrlsServer) Send(m *LinkRequest) error {
	return x.ServerStream.SendMsg(m)
}

var _Crawler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crawler.Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Crawl",
			Handler:    _Crawler_Crawl_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Crawler_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListVisitedUrls",
			Handler:       _Crawler_ListVisitedUrls_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "crawler.proto",
}

func init() { proto.RegisterFile("crawler.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2e, 0x4a, 0x2c,
	0xcf, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xe4, 0xb9,
	0xb8, 0x7d, 0x32, 0xf3, 0xb2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98,
	0x4b, 0x8b, 0x72, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x25, 0x6d, 0x2e, 0x7e,
	0x67, 0x88, 0xda, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x09, 0x2e, 0xf6, 0xdc,
	0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0xa8, 0x42, 0x18, 0x57, 0x49, 0x91, 0x8b, 0x3b, 0xb8, 0x24,
	0xbf, 0x00, 0x66, 0x9a, 0x10, 0x17, 0x4b, 0x4e, 0x66, 0x5e, 0x36, 0x54, 0x15, 0x98, 0xad, 0xa4,
	0xc1, 0xc5, 0x03, 0x51, 0x42, 0x8c, 0x61, 0x3e, 0x99, 0xc5, 0x25, 0x28, 0x86, 0x15, 0x97, 0x80,
	0x55, 0x71, 0x04, 0x81, 0xd9, 0x46, 0xfb, 0x18, 0xb9, 0xd8, 0xa1, 0xae, 0x13, 0xb2, 0xe4, 0x62,
	0x05, 0x33, 0x85, 0x44, 0xf4, 0x60, 0x7e, 0x45, 0xf2, 0x99, 0x94, 0x04, 0x5c, 0x14, 0xcd, 0x3b,
	0x4a, 0x0c, 0x42, 0xa6, 0x5c, 0x2c, 0x20, 0x37, 0x21, 0xe9, 0x44, 0xf2, 0x85, 0x94, 0x28, 0x9a,
	0x28, 0x5c, 0x9b, 0x23, 0x17, 0x3f, 0xc8, 0x81, 0x61, 0x99, 0xc5, 0x99, 0x25, 0xa9, 0x29, 0xa1,
	0x45, 0x39, 0xc5, 0x28, 0x76, 0xc3, 0x9d, 0x2e, 0x85, 0xd5, 0x45, 0x4a, 0x0c, 0x06, 0x8c, 0x49,
	0x6c, 0xe0, 0xe8, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x12, 0x46, 0xf2, 0x65, 0x9f, 0x01,
	0x00, 0x00,
}
